@using static System.Linq.Enumerable;
@inject GamePlayer game

@code {
  public async Task CalculatePath()
  {
    System.Console.WriteLine("Started Path Calculation");
    game.CalculateDetailedPath();
    System.Console.WriteLine("Ended Path Calculation");
  }

  public void OptimiseGrid()
  {
    System.Console.WriteLine("Started Grid Optimization");
    game.OptimizeGrid();
    System.Console.WriteLine("Ended Grid Optimization");
  }
  private bool stepInProgress { get; set; } = false;
  public async Task TakeStep()
  {
    stepInProgress = true;
    try
    {
      System.Console.WriteLine("Started Following Path");
      await game.Take1Step();
      System.Console.WriteLine("Ended Following Path");
    }
    catch (Exception e)
    {

      System.Console.WriteLine(e);
      System.Console.WriteLine("Error Following Path");
    }
    finally
    {
      stepInProgress = false;
    }
  }
}

<div>

  <button class="@(Styles.Btn) m-3" @onclick="OptimiseGrid">Optimise Grid</button>
  <button class="@(Styles.Btn) m-3" @onclick="CalculatePath">Calculate Path</button>
  <button class="@(Styles.Btn) m-3" @onclick="TakeStep" disabled="@stepInProgress">Take Step</button>

  @if (game.Path != null)
  {
    <div class="text-sm">

      Path Steps: @game.Path.Count()
    </div>
    <div>
    Path Cost: @game.Map.CalculatePathCost(game.Path)
  </div>
    <div>
    Battery: @game.Battery
  </div>
    <div>
    @foreach (var i in Range(0, 5))
      {
        <div>@i: @game.Path.ElementAt(i)</div>
      }
    </div>
  }
</div>