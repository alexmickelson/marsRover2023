@using static System.Linq.Enumerable;
@inject GamePlayer game

@code {
  protected override void OnInitialized()
  {
    Action refreshFromAnotherThread = () => this.InvokeAsync(this.StateHasChanged);
    game.Rover.OnPositionChanged += refreshFromAnotherThread;
    game.Map.OnMapUpdated += refreshFromAnotherThread;
  }
  public void OptimiseGrid()
  {
    System.Console.WriteLine("Started Grid Optimization");
    game.Rover.OptimizeGrid(reset: true);
    System.Console.WriteLine("Ended Grid Optimization");
  }

  public void PlayCopter()
  {
    System.Console.WriteLine("Playing copter");
    var t = game.PlayCopter();
  }

  public void Go()
  {
    System.Console.WriteLine("Starting to play game");
    var t = game.PlayRover();
    t.Join();
  }

  public async Task PlayGame()
  {
    await Task.Run(() =>
      game.PlayGame()
    );
  }
  public string classStyle = " m-5 ";
}

<div>

  <button class="@(Styles.Btn) m-3" @onclick="OptimiseGrid">Optimize Grid</button>
  <button class="@(Styles.Btn) m-3" @onclick="PlayCopter">Play Copter</button>
  <button class="@(Styles.Btn) m-3" @onclick="Go">Follow Path</button>
  <button class="@(Styles.Btn) m-3" @onclick="PlayGame">Play Game</button>

  <div class="flex">
    <div class="@classStyle">Initial Path Cost: @game.Rover.StartingPathCost</div>
    <div class="@classStyle">History and Remaining Cost: @game.Rover.TotalProjectedCost</div>
    @foreach (var copter in game.Copters)
    {
      <div class="@classStyle">Copter Battery: @copter.Battery</div>
    }
  </div>
  <div class="flex">
    @if (game.Rover.Path != null)
    {
      <div class="@classStyle">Path Cost: @game.Map.CalculatePathCost(game.Rover.Path)</div>
      <div class="@classStyle">Battery: @game.Rover.Battery</div>
      <div class="@classStyle">Path Calulation Time: @game.Rover.LastPathCalulationTime ms</div>
      <div class="@classStyle">Grid Optmization Time: @game.Rover.LastGridOptimizationTime ms</div>
    }
  </div>
</div>