@using static System.Linq.Enumerable
@inject GamePlayer game

@code {
  public Dictionary<int, string> Colors = new Dictionary<int, string>() {
{0, "50"},
{1, "50"},
{2, "50"},
{3, "100"},
{4, "100"},
{5, "100"},
{6, "200"},
{7, "200"},
{8, "200"},
{9, "300"},
{10, "300"},
{11, "300"},
{12, "400"},
{13, "400"},
{14, "400"},
{15, "500"},
{16, "500"},
{17, "500"},
{18, "600"},
{19, "600"},
{20, "600"},
{21, "700"},
{22, "700"},
{23, "700"},
{24, "800"},
{25, "800"},
{26, "800"},
{27, "900"},
{28, "900"},
{29, "900"},
{30, "900"},
{31, "900"},
{32, "900"},
{33, "900"},
{34, "900"},
{35, "900"},
{36, "900"},
{37, "900"},
{38, "900"},
};
  public string calculateCellClass(int x, int y)
  {
    var location = (x, y);

    if (location == game.CurrentLocation)
      return "cell bg-lime-600";

    if (location == game.Target)
      return "cell bg-black";

    if (game.Map.OptimizedGrid != null && !game.Map.OptimizedGrid.ContainsKey(location))
      return "cell bg-black";

    if (game.Path != null && game.Path.Contains(location))
      return "cell bg-rose-900";
    if (game.History.Contains(location))
      return "cell bg-slate-500";

    if (!game.Map.Grid.ContainsKey(location))
      return "";
    var colorKey = game.Map.Grid[location] / 10;

    if (Colors.ContainsKey(colorKey))
      return "cell bg-rose-" + Colors[colorKey];

    return "cell bg-rose-900";
  }
  protected override void OnInitialized()
  {
    game.OnPositionChanged += async () => await InvokeAsync(() => StateHasChanged());
  }
  public (int, int) BottomLeft
  {
    get
    {
      var lowX =
      game.StartingLocation.Item1 < game.Target.Item1
      ? game.StartingLocation.Item1
      : game.Target.Item1;

      var lowY =
      game.StartingLocation.Item2 < game.Target.Item2
      ? game.StartingLocation.Item2
      : game.Target.Item2;

      return (lowX, lowY);
    }
  }
  public (int, int) TopRight
  {
    get
    {
      var highX = game.StartingLocation.Item1 > game.Target.Item1 ? game.StartingLocation.Item1 : game.Target.Item1;
      var highY = game.StartingLocation.Item2 > game.Target.Item2 ? game.StartingLocation.Item2 : game.Target.Item2;
      return (highX, highY);
    }
  }
}
<style>
  .cell {
    height: 3px;
    width: 3px;
    display: inline-block;
    margin: 0;
    padding: 0;
  }

  .my-row {
    height: 3px;
    margin: 0;
    padding: 0;
  }
</style>

<div class="p-1">

  @if (game.Map != null)
  {
    <div class="px-auto">
      @foreach (var y in Range(BottomLeft.Item2 - 5, TopRight.Item2 - BottomLeft.Item2 + 10).Reverse())
      {
        <div class="my-row">
          @foreach (var x in Range(BottomLeft.Item1 - 5, TopRight.Item1 - BottomLeft.Item1 + 10))
          {
            string myClass = calculateCellClass(x, y);
            <div class=@(myClass)>
            </div>
          }
        </div>
      }
    </div>
  }
</div>