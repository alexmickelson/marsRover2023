@using static System.Linq.Enumerable
@inject GamePlayer game

@code {
  public Dictionary<int, string> Colors = new Dictionary<int, string>() {
{0, "50"},
{1, "50"},
{2, "50"},
{3, "100"},
{4, "100"},
{5, "100"},
{6, "200"},
{7, "200"},
{8, "200"},
{9, "300"},
{10, "300"},
{11, "300"},
{12, "400"},
{13, "400"},
{14, "400"},
{15, "500"},
{16, "500"},
{17, "500"},
{18, "600"},
{19, "600"},
{20, "600"},
{21, "700"},
{22, "700"},
{23, "700"},
{24, "800"},
{25, "800"},
{26, "800"},
{27, "900"},
{28, "900"},
{29, "900"},
{30, "900"},
{31, "900"},
{32, "900"},
{33, "900"},
{34, "900"},
{35, "900"},
{36, "900"},
{37, "900"},
{38, "900"},
};
  public string calculateCellClass(int row, int col)
  {
    @* var closeToRover = Math.Abs(row - game.CurrentLocation.Item1) < 2 && Math.Abs(col - game.CurrentLocation.Item2) < 2;
*@
    var location = (row, col);

    if (location == game.CurrentLocation)
      return "cell bg-lime-600";

    if (location == game.Target)
      return "cell bg-black";

    if (game.Map.OptimizedGrid != null && !game.Map.OptimizedGrid.ContainsKey(location))
      return "cell bg-black";

    if (game.Path != null && game.Path.Contains(location))
      return "cell bg-rose-900";



    if (!game.Map.Grid.ContainsKey(location))
      return "";
    var colorKey = game.Map.Grid[location] / 10;

    if (Colors.ContainsKey(colorKey))
      return "cell bg-rose-" + Colors[colorKey];

    return "cell bg-rose-900";
  }
  public void Refresh()
  {
    this.StateHasChanged();
  }

  public (int, int) BottomLeft
  {
    get
    {
      if (game.Path == null)
        return (0, 0);

      var lowRow = game.Path.Select(l => l.Item1).Min();
      var lowCol = game.Path.Select(l => l.Item2).Min();
      return (lowRow, lowCol);
    }
  }
  public (int, int) TopRight
  {
    get
    {
      if (game.Path == null)
        return game.Map.TopRight;

      var highRow = game.Path.Select(l => l.Item1).Max();
      var highCol = game.Path.Select(l => l.Item2).Max();
      return (highRow, highCol);
    }
  }
}
<style>
  .cell {
    height: 3px;
    width: 3px;
    display: inline-block;
    margin: 0;
    padding: 0;
  }

  .my-row {
    height: 3px;
    margin: 0;
    padding: 0;
  }
</style>

<div class="p-1">
  <button class="@(Styles.Btn)" onclick="@Refresh">Refresh Grid</button>

  @if (game.Map != null && game.Path != null)
  {
    <div class="px-auto">
          @foreach (var row in Range(BottomLeft.Item1 - 5, TopRight.Item1 - BottomLeft.Item1 + 10).Reverse())
      {
        <div class="my-row">
      @foreach (var col in Range(BottomLeft.Item2 - 5, TopRight.Item2 - BottomLeft.Item2 + 10))
          {
            string myClass = calculateCellClass(row, col);
            <div class=@(myClass)>
            </div>
          }
        </div>
      }
    </div>
  }
</div>